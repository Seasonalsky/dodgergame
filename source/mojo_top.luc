module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    
    input playerUp,
    input playerDown,
    input playerLeft,
    input playerRight,
    input arx_busy,       // AVR RX buffer full
    output dataline
  ) {
  
  sig rst;                  // reset signal

  
  sig map[66][24];
  const PLAYER_POSN=15;
    
  var i;
  .clk(clk) {
    display display( .rst(rst));
    player player(.rst(rst));
    projectiles projectiles(.rst(rst));

    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    for(i=0; i<66; i++){
      map[i] = 24h000000;
    }
    for(i=60; i<66; i++){
      map[i]=24h00ff00;
    }
    map[15] = 24hffffff;
    
    display.mapArr = map;
    dataline = display.datalines;
    
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    player.up=playerUp;
    player.down=playerDown;
    player.left=playerLeft;
    player.right=playerRight;
    player.proj=1;
  }
}