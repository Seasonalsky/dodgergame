/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input playerUp,
    input playerDown,
    input playerLeft,
    input playerRight,
    input arx_busy,
    output reg dataline
  );
  
  
  
  reg rst;
  
  reg [1583:0] map;
  
  localparam PLAYER_POSN = 4'hf;
  
  integer i;
  
  wire [1-1:0] M_display_datalines;
  reg [1584-1:0] M_display_mapArr;
  display_1 display (
    .clk(clk),
    .rst(rst),
    .mapArr(M_display_mapArr),
    .datalines(M_display_datalines)
  );
  wire [6-1:0] M_player_coor;
  wire [1-1:0] M_player_gameend;
  reg [1-1:0] M_player_up;
  reg [1-1:0] M_player_down;
  reg [1-1:0] M_player_left;
  reg [1-1:0] M_player_right;
  reg [60-1:0] M_player_proj;
  player_2 player (
    .clk(clk),
    .rst(rst),
    .up(M_player_up),
    .down(M_player_down),
    .left(M_player_left),
    .right(M_player_right),
    .proj(M_player_proj),
    .coor(M_player_coor),
    .gameend(M_player_gameend)
  );
  wire [60-1:0] M_projectiles_coor;
  projectiles_3 projectiles (
    .clk(clk),
    .rst(rst),
    .coor(M_projectiles_coor)
  );
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_4 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    for (i = 1'h0; i < 7'h42; i = i + 1) begin
      map[(i)*24+23-:24] = 24'h000000;
    end
    for (i = 6'h3c; i < 7'h42; i = i + 1) begin
      map[(i)*24+23-:24] = 24'h00ff00;
    end
    map[360+23-:24] = 24'hffffff;
    M_display_mapArr = map;
    dataline = M_display_datalines;
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_player_up = playerUp;
    M_player_down = playerDown;
    M_player_left = playerLeft;
    M_player_right = playerRight;
    M_player_proj = 1'h1;
  end
endmodule
