/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module player_2 (
    input clk,
    input rst,
    input up,
    input down,
    input left,
    input right,
    input [59:0] proj,
    output reg [5:0] coor,
    output reg gameend
  );
  
  
  
  wire [1-1:0] M_edUp_out;
  reg [1-1:0] M_edUp_in;
  edge_detector_5 edUp (
    .clk(clk),
    .in(M_edUp_in),
    .out(M_edUp_out)
  );
  wire [1-1:0] M_edDown_out;
  reg [1-1:0] M_edDown_in;
  edge_detector_5 edDown (
    .clk(clk),
    .in(M_edDown_in),
    .out(M_edDown_out)
  );
  wire [1-1:0] M_edLeft_out;
  reg [1-1:0] M_edLeft_in;
  edge_detector_5 edLeft (
    .clk(clk),
    .in(M_edLeft_in),
    .out(M_edLeft_out)
  );
  wire [1-1:0] M_edRight_out;
  reg [1-1:0] M_edRight_in;
  edge_detector_5 edRight (
    .clk(clk),
    .in(M_edRight_in),
    .out(M_edRight_out)
  );
  wire [1-1:0] M_bcUp_out;
  reg [1-1:0] M_bcUp_in;
  button_conditioner_9 bcUp (
    .clk(clk),
    .in(M_bcUp_in),
    .out(M_bcUp_out)
  );
  wire [1-1:0] M_bcDown_out;
  reg [1-1:0] M_bcDown_in;
  button_conditioner_9 bcDown (
    .clk(clk),
    .in(M_bcDown_in),
    .out(M_bcDown_out)
  );
  wire [1-1:0] M_bcLeft_out;
  reg [1-1:0] M_bcLeft_in;
  button_conditioner_9 bcLeft (
    .clk(clk),
    .in(M_bcLeft_in),
    .out(M_bcLeft_out)
  );
  wire [1-1:0] M_bcRight_out;
  reg [1-1:0] M_bcRight_in;
  button_conditioner_9 bcRight (
    .clk(clk),
    .in(M_bcRight_in),
    .out(M_bcRight_out)
  );
  wire [1-1:0] M_counter_ans;
  reg [26-1:0] M_counter_amount;
  reg [1-1:0] M_counter_resetCd;
  customCounter_13 counter (
    .clk(clk),
    .rst(rst),
    .amount(M_counter_amount),
    .resetCd(M_counter_resetCd),
    .ans(M_counter_ans)
  );
  reg [5:0] M_storeCoor_d, M_storeCoor_q = 1'h0;
  
  reg [5:0] newCoor;
  
  always @* begin
    M_storeCoor_d = M_storeCoor_q;
    
    coor = M_storeCoor_q;
    gameend = 1'h0;
    M_counter_amount = 24'h989680;
    M_counter_resetCd = 1'h0;
    M_bcUp_in = up;
    M_bcDown_in = down;
    M_bcLeft_in = left;
    M_bcRight_in = right;
    M_edUp_in = M_bcUp_out;
    M_edDown_in = M_bcDown_out;
    M_edLeft_in = M_bcLeft_out;
    M_edRight_in = M_bcRight_out;
    newCoor = 1'h0;
    if (M_counter_ans == 1'h1) begin
      if (M_edUp_out) begin
        newCoor = M_storeCoor_q - 3'h6;
      end else begin
        if (M_edDown_out) begin
          newCoor = M_storeCoor_q + 3'h6;
        end else begin
          if (M_edLeft_out) begin
            newCoor = M_storeCoor_q - 1'h1;
          end else begin
            if (M_edRight_out) begin
              newCoor = M_storeCoor_q + 1'h1;
            end
          end
        end
      end
      M_counter_resetCd = 1'h1;
    end
    gameend = 1'h0;
    if (proj[(M_storeCoor_q)*1+0-:1] == 1'h1) begin
      gameend = 1'h1;
    end
    if (rst) begin
      M_storeCoor_d = 1'h0;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_storeCoor_q <= 1'h0;
    end else begin
      M_storeCoor_q <= M_storeCoor_d;
    end
  end
  
endmodule
